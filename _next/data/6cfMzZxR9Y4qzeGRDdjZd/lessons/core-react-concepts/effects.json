{"pageProps":{"post":{"attributes":{"description":"In this section of the Complete Intro to React v9 course by Brian Holt, learn how to use the `useEffect` hook to make API requests for initializing a list of pizzas, manage UI initial load with loading states, and optimize component updates using unique keys for rendering efficiency. Enhance your React projects with best practices for asynchronous data fetching and component optimization.","keywords":["React useEffect","API requests","React loading state","React component optimization","Brian Holt"]},"html":"<h2>Effects</h2>\n<p>We have enough of an app to start making some API requests now. We want the app to request an initial set of pizzaTypes on initial load of the page. So let&#39;s make that happen using a special hook called <code>useEffect</code>. <code>useEffect</code> allows you to say do a render of this component first so the user can see <em>something</em> then as soon as the render is done, <em>then</em> do something (the something here being an effect). In our case, we want the user to see our UI first then we want to make a request to the API so we can initialize a list of pizzas.</p>\n<blockquote>\n<p>Make sure you have both your Vite dev server running <em>and</em> your API server running. Both.</p>\n</blockquote>\n<p>Let&#39;s refactor Order.jsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// change import at top</span>\n<span class=\"hljs-keyword\">import</span> { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Pizza</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Pizza&quot;</span>;\n\n<span class=\"hljs-comment\">// outside of the render function</span>\n<span class=\"hljs-comment\">// feel free to change en-US / USD to your locale</span>\n<span class=\"hljs-keyword\">const</span> intl = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Intl</span>.<span class=\"hljs-title class_\">NumberFormat</span>(<span class=\"hljs-string\">&quot;en-US&quot;</span>, {\n  <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&quot;currency&quot;</span>,\n  <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&quot;USD&quot;</span>,\n});\n\n<span class=\"hljs-comment\">// add to the other useStates inside component at top</span>\n<span class=\"hljs-keyword\">const</span> [pizzaTypes, setPizzaTypes] = <span class=\"hljs-title function_\">useState</span>([]);\n<span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-keyword\">let</span> price, selectedPizza;\n<span class=\"hljs-keyword\">if</span> (!loading) {\n  selectedPizza = pizzaTypes.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">pizza</span>) =&gt;</span> pizzaType === pizza.<span class=\"hljs-property\">id</span>);\n  price = intl.<span class=\"hljs-title function_\">format</span>(\n    selectedPizza.<span class=\"hljs-property\">sizes</span> ? selectedPizza.<span class=\"hljs-property\">sizes</span>[pizzaSize] : <span class=\"hljs-string\">&quot;&quot;</span>\n  );\n}\n\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">fetchPizzaTypes</span>();\n}, []);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchPizzaTypes</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(resolve, <span class=\"hljs-number\">3000</span>)); <span class=\"hljs-comment\">// remove this later, just to show you the loading state</span>\n\n  <span class=\"hljs-keyword\">const</span> pizzasRes = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&quot;/api/pizzas&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> pizzasJson = <span class=\"hljs-keyword\">await</span> pizzasRes.<span class=\"hljs-title function_\">json</span>();\n  <span class=\"hljs-title function_\">setPizzaTypes</span>(pizzasJson);\n  <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n}\n\n<span class=\"hljs-comment\">// replace the options</span>\n{\n  pizzaTypes.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">pizza</span>) =&gt;</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{pizza.id}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{pizza.id}</span>&gt;</span>\n      {pizza.name}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span>\n  ));\n}\n\n<span class=\"hljs-comment\">// replace &lt;Pizza /&gt; and button at the end</span>\n</code></pre><ul>\n<li>We put all the logic for fetching pizza types in an async function to make it more readable. You can&#39;t make the function provided to useEffect async.</li>\n<li>the <code>[]</code> at the end of the useEffect is where you declare your data dependencies. React wants to know <em>when</em> to run that effect again. You don&#39;t give it data dependencies, it assumes any time any hook changes that you should run the effect again. This is bad because that would mean any time setPizzaTypes gets called it&#39;d re-run render and all the hooks again. See a problem there? It&#39;d run infinitely since fetchPizzaTypes calls setPizzaTypes.</li>\n<li>You can instead provide which hooks to watch for changes for. In our case, we actually only want it to run once, on creation of the component, and then to not run that effect again. (we&#39;ll do searching later via clicking the submit button) You can accomplish this only-run-on-creation by providing an empty array.</li>\n<li>We&#39;re using a loading flag to only display data once it&#39;s ready. We&#39;ll use TanStack Query in a bit to make this code look cleaner. But this is how you do conditional showing/hiding of components in React.</li>\n<li>The <code>key</code> portion is an interesting one. When React renders arrays of things, it doesn&#39;t know the difference between something is new and something is just being re-ordered in the array (think like changing the sorting of a results list, like price high-to-low and then priced low-to-high). Because of this, if you don&#39;t tell React how to handle those situations, it just tears it all down and re-renders everything anew. This can cause unnecessary slowness on devices. This is what key is for. Key tells React &quot;this is a simple identifier of what this component is&quot;. If React sees you just moved a key to a different order, it will keep the component tree. So key here is to associate the key to something unique about that component. 99/100 this is a database ID of some variety. <em>Don&#39;t</em> use the index of the array as that just isn&#39;t right unless the array is literally is never going to change order.</li>\n</ul>\n<h3>Updating the Selected Pizza &amp; Price</h3>\n<p>When a pizza is selected, we need to update the selected pizza and price. First, let&#39;s format the price after the <code>selectedPizza</code> state is updated:</p>\n<pre><code class=\"hljs language-javascript\">  <span class=\"hljs-keyword\">if</span>(!loading){\n    selectedPizza = pizzaTypes.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">pizza</span>) =&gt;</span> pizzaType === pizza.<span class=\"hljs-property\">id</span>)\n    price = intl.<span class=\"hljs-title function_\">format</span>(selectedPizza.<span class=\"hljs-property\">sizes</span>[pizzaSize])\n  }\n</code></pre><p>When the application loads, we don&#39;t have our data yet. So we only want to render a selected pizza and price once we are done loading. Add a condition to the JSX to show &quot;Loading...&quot; initially, and then the selected pizza once we are done loading. Add the condition <strong>before</strong> the closing <code>&lt;/form&gt;</code> tag:</p>\n<pre><code class=\"hljs language-jsx\">...\n  {\n    loading ? (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span>\n    ) : (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;order-pizza&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pizza</span>\n          <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{selectedPizza.name}</span>\n          <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">{selectedPizza.description}</span>\n          <span class=\"hljs-attr\">image</span>=<span class=\"hljs-string\">{selectedPizza.image}</span>\n        /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{price}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    )\n  }\n&lt;/form&gt;\n</code></pre><blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v9-project/tree/master/05-effects\">Click here to see the state of the project up until now: 05-effects</a></p>\n</blockquote>\n","markdown":"\n## Effects\n\nWe have enough of an app to start making some API requests now. We want the app to request an initial set of pizzaTypes on initial load of the page. So let's make that happen using a special hook called `useEffect`. `useEffect` allows you to say do a render of this component first so the user can see _something_ then as soon as the render is done, _then_ do something (the something here being an effect). In our case, we want the user to see our UI first then we want to make a request to the API so we can initialize a list of pizzas.\n\n> Make sure you have both your Vite dev server running _and_ your API server running. Both.\n\nLet's refactor Order.jsx\n\n```javascript\n// change import at top\nimport { useEffect, useState } from \"react\";\nimport Pizza from \"./Pizza\";\n\n// outside of the render function\n// feel free to change en-US / USD to your locale\nconst intl = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\n// add to the other useStates inside component at top\nconst [pizzaTypes, setPizzaTypes] = useState([]);\nconst [loading, setLoading] = useState(true);\n\nlet price, selectedPizza;\nif (!loading) {\n  selectedPizza = pizzaTypes.find((pizza) => pizzaType === pizza.id);\n  price = intl.format(\n    selectedPizza.sizes ? selectedPizza.sizes[pizzaSize] : \"\"\n  );\n}\n\nuseEffect(() => {\n  fetchPizzaTypes();\n}, []);\n\nasync function fetchPizzaTypes() {\n  await new Promise((resolve) => setTimeout(resolve, 3000)); // remove this later, just to show you the loading state\n\n  const pizzasRes = await fetch(\"/api/pizzas\");\n  const pizzasJson = await pizzasRes.json();\n  setPizzaTypes(pizzasJson);\n  setLoading(false);\n}\n\n// replace the options\n{\n  pizzaTypes.map((pizza) => (\n    <option key={pizza.id} value={pizza.id}>\n      {pizza.name}\n    </option>\n  ));\n}\n\n// replace <Pizza /> and button at the end\n```\n\n- We put all the logic for fetching pizza types in an async function to make it more readable. You can't make the function provided to useEffect async.\n- the `[]` at the end of the useEffect is where you declare your data dependencies. React wants to know _when_ to run that effect again. You don't give it data dependencies, it assumes any time any hook changes that you should run the effect again. This is bad because that would mean any time setPizzaTypes gets called it'd re-run render and all the hooks again. See a problem there? It'd run infinitely since fetchPizzaTypes calls setPizzaTypes.\n- You can instead provide which hooks to watch for changes for. In our case, we actually only want it to run once, on creation of the component, and then to not run that effect again. (we'll do searching later via clicking the submit button) You can accomplish this only-run-on-creation by providing an empty array.\n- We're using a loading flag to only display data once it's ready. We'll use TanStack Query in a bit to make this code look cleaner. But this is how you do conditional showing/hiding of components in React.\n- The `key` portion is an interesting one. When React renders arrays of things, it doesn't know the difference between something is new and something is just being re-ordered in the array (think like changing the sorting of a results list, like price high-to-low and then priced low-to-high). Because of this, if you don't tell React how to handle those situations, it just tears it all down and re-renders everything anew. This can cause unnecessary slowness on devices. This is what key is for. Key tells React \"this is a simple identifier of what this component is\". If React sees you just moved a key to a different order, it will keep the component tree. So key here is to associate the key to something unique about that component. 99/100 this is a database ID of some variety. _Don't_ use the index of the array as that just isn't right unless the array is literally is never going to change order.\n\n### Updating the Selected Pizza & Price\n\nWhen a pizza is selected, we need to update the selected pizza and price. First, let's format the price after the `selectedPizza` state is updated:\n\n```javascript\n  if(!loading){\n    selectedPizza = pizzaTypes.find((pizza) => pizzaType === pizza.id)\n    price = intl.format(selectedPizza.sizes[pizzaSize])\n  }\n```\n\nWhen the application loads, we don't have our data yet. So we only want to render a selected pizza and price once we are done loading. Add a condition to the JSX to show \"Loading...\" initially, and then the selected pizza once we are done loading. Add the condition **before** the closing `</form>` tag:\n\n```jsx\n...\n  {\n    loading ? (\n      <h3>Loading...</h3>\n    ) : (\n      <div className=\"order-pizza\">\n        <Pizza\n          name={selectedPizza.name}\n          description={selectedPizza.description}\n          image={selectedPizza.image}\n        />\n        <p>{price}</p>\n      </div>\n    )\n  }\n</form>\n```\n\n> üèÅ [Click here to see the state of the project up until now: 05-effects][step]\n\n[step]: https://github.com/btholt/citr-v9-project/tree/master/05-effects\n","slug":"effects","title":"Effects","section":"Core React Concepts","icon":"book","filePath":"/home/runner/work/complete-intro-to-react-v9/complete-intro-to-react-v9/lessons/04-core-react-concepts/C-effects.md","nextSlug":"/lessons/core-react-concepts/dev-tools","prevSlug":"/lessons/core-react-concepts/hooks"}},"__N_SSG":true}