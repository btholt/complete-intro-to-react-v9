{"pageProps":{"post":{"attributes":{"description":"Learn how to handle user cart submissions and checkout process in React with Brian Holt's Complete Intro to React, v9. Build a shopping cart component using Order.jsx and Cart.jsx, manage cart state with hooks, and implement server-side checkout functionality efficiently. Ideal for React developers seeking practical, hands-on experience in web development.","keywords":["React","shopping cart","checkout","Brian Holt","Order.jsx","Cart.jsx","web development"]},"html":"<h2>Handling User Input</h2>\n<p>So now we want to be able to handle the user&#39;s cart and submitting our order. Let&#39;s go add what we need to Order.jsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// add import</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Cart</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Cart&quot;</span>;\n\n<span class=\"hljs-comment\">// add another hook</span>\n<span class=\"hljs-keyword\">const</span> [cart, setCart] = <span class=\"hljs-title function_\">useState</span>([]);\n\n<span class=\"hljs-comment\">// replace &lt;form&gt;</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>\n  <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> {\n    e.preventDefault();\n    setCart([...cart, { pizza: selectedPizza, size: pizzaSize, price }]);\n  }}\n&gt;\n  [‚Ä¶]\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>;\n\n<span class=\"hljs-comment\">// just inside the last closing div</span>\n{\n  loading ? <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>LOADING ‚Ä¶<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span> : <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Cart</span> <span class=\"hljs-attr\">cart</span>=<span class=\"hljs-string\">{cart}</span> /&gt;</span></span>\n}\n</code></pre><p>So now we&#39;re using an onSubmit to handle the adding to cart. Awesome! Then we&#39;re passing that into Cart to have a nice display.</p>\n<p>Let&#39;s make the cart. Make a file called Cart.jsx and add</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> intl = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Intl</span>.<span class=\"hljs-title class_\">NumberFormat</span>(<span class=\"hljs-string\">&quot;en-US&quot;</span>, {\n  <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&quot;currency&quot;</span>,\n  <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&quot;USD&quot;</span>, <span class=\"hljs-comment\">// feel free to change to your local currency</span>\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Cart</span>(<span class=\"hljs-params\">{ cart, checkout }</span>) {\n  <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; cart.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> current = cart[i];\n    total += current.<span class=\"hljs-property\">pizza</span>.<span class=\"hljs-property\">sizes</span>[current.<span class=\"hljs-property\">size</span>];\n  }\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;cart&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Cart<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n        {cart.map((item, index) =&gt; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;size&quot;</span>&gt;</span>{item.size}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> ‚Äì\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;type&quot;</span>&gt;</span>{item.pizza.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> ‚Äì\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;price&quot;</span>&gt;</span>{item.price}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        ))}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Total: {intl.format(total)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{checkout}</span>&gt;</span>Checkout<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><blockquote>\n<p>Normally doing key this way is a bad idea, but we wouldn&#39;t reorganize this list, nor care if it rerendered anyway, so it gets a pass.</p>\n</blockquote>\n<p>Now we have a nice shopping cart experience. So how do actually checkout on the server? Let&#39;s do that! We probably want to do it as the Order level. It already has the Cart and we can just leave the Cart as a dumb display component. We can just pass a function to call into the Cart component and call it and run the function at the Order level.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// inside the render body</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkout</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\n\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&quot;/api/order&quot;</span>, {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;POST&quot;</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n    },\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({\n      cart,\n    }),\n  });\n\n  <span class=\"hljs-title function_\">setCart</span>([]);\n  <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n}\n\n<span class=\"hljs-comment\">// replace Cart</span>\n&lt;<span class=\"hljs-title class_\">Cart</span> checkout={checkout} cart={cart} /&gt;;\n</code></pre><p>Now we can pass that checkout function in and whenever someone clicks inside the form, it will run the checkout function from the Order components. We&#39;re doing a simple loading animation, doing a fetch, and then clearing the status once we&#39;re all done. Not too bad!</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v9-project/tree/master/07-handling-forms\">Click here to see the state of the project up until now: 07-handling-forms</a></p>\n</blockquote>\n","markdown":"\n## Handling User Input\n\nSo now we want to be able to handle the user's cart and submitting our order. Let's go add what we need to Order.jsx\n\n```javascript\n// add import\nimport Cart from \"./Cart\";\n\n// add another hook\nconst [cart, setCart] = useState([]);\n\n// replace <form>\n<form\n  onSubmit={(e) => {\n    e.preventDefault();\n    setCart([...cart, { pizza: selectedPizza, size: pizzaSize, price }]);\n  }}\n>\n  [‚Ä¶]\n</form>;\n\n// just inside the last closing div\n{\n  loading ? <h2>LOADING ‚Ä¶</h2> : <Cart cart={cart} />\n}\n```\n\nSo now we're using an onSubmit to handle the adding to cart. Awesome! Then we're passing that into Cart to have a nice display.\n\nLet's make the cart. Make a file called Cart.jsx and add\n\n```javascript\nconst intl = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\", // feel free to change to your local currency\n});\n\nexport default function Cart({ cart, checkout }) {\n  let total = 0;\n  for (let i = 0; i < cart.length; i++) {\n    const current = cart[i];\n    total += current.pizza.sizes[current.size];\n  }\n  return (\n    <div className=\"cart\">\n      <h2>Cart</h2>\n      <ul>\n        {cart.map((item, index) => (\n          <li key={index}>\n            <span className=\"size\">{item.size}</span> ‚Äì\n            <span className=\"type\">{item.pizza.name}</span> ‚Äì\n            <span className=\"price\">{item.price}</span>\n          </li>\n        ))}\n      </ul>\n      <p>Total: {intl.format(total)}</p>\n      <button onClick={checkout}>Checkout</button>\n    </div>\n  );\n}\n```\n\n> Normally doing key this way is a bad idea, but we wouldn't reorganize this list, nor care if it rerendered anyway, so it gets a pass.\n\nNow we have a nice shopping cart experience. So how do actually checkout on the server? Let's do that! We probably want to do it as the Order level. It already has the Cart and we can just leave the Cart as a dumb display component. We can just pass a function to call into the Cart component and call it and run the function at the Order level.\n\n```javascript\n// inside the render body\nasync function checkout() {\n  setLoading(true);\n\n  await fetch(\"/api/order\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      cart,\n    }),\n  });\n\n  setCart([]);\n  setLoading(false);\n}\n\n// replace Cart\n<Cart checkout={checkout} cart={cart} />;\n```\n\nNow we can pass that checkout function in and whenever someone clicks inside the form, it will run the checkout function from the Order components. We're doing a simple loading animation, doing a fetch, and then clearing the status once we're all done. Not too bad!\n\n> üèÅ [Click here to see the state of the project up until now: 07-handling-forms][step]\n\n[step]: https://github.com/btholt/citr-v9-project/tree/master/07-handling-forms\n","slug":"handling-user-inputs","title":"Handling User Inputs","section":"Core React Concepts","icon":"book","filePath":"/home/runner/work/complete-intro-to-react-v9/complete-intro-to-react-v9/lessons/04-core-react-concepts/F-handling-user-inputs.md","nextSlug":"/lessons/core-react-concepts/context","prevSlug":"/lessons/core-react-concepts/custom-hooks"}},"__N_SSG":true}